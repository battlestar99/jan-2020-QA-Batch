Java - Functions - 

runnable class - as java application - TestNG, cucumber 
public static void main (String [] args]{}

non-runnable class - properties and functions 

OOP - class is a design or prototype 

object does all the things - 2 doors, 5 windows, 5 rooms 


Selenium Setup - Role of selenium 

Selenium - Library - java library 

functions already created that we are going to use - 

packages - non runnable class - functions and properties 

5 packages - 100 non runnable class - 1000 functions and properties 

jar file - selenium java 
selenium server standalone - selenium webdriver 

selenium - interact with a browser - web based application 

90 percent of the application - 

Setting up selenium - 

1. setting up the libraries - jar files - maven repository 

2. browser driver - chrome, mozila, safari , IE

functions - how to use functions 
how to create and how to use 
what to learn : 
2-3 
1. Java - OOP 

2. Selenium Libraries -  

actual value - test scripts 
expected value - requirments 

actual value and expected values are same - test case pass - test
if not same - test case fail - requirements 




What we do in automated test scripts: 3 categories 

1. interacting with browser - webdriver 

2. finding web elements - loacting techniques 
text box - type something you need value - type
button - click
check box - click
radio button - click
links - click
drop down menu - select

table
javascript pop up
windows 

3. interacting with the web elements 



wait - 

implicit wait - 10 seconds - 






List of functions we are familiar 

1. opening up a browser 
webdriver driver = new chromedriver

2. go to an url 

driver.get(url)
driver.navigate.to(url) 

3. implicit wait - to make sure all web elements are loaded in the page

4. delete all the cookies 
driver.manage.deleteallcookies 

5. find the web element and store it in a webelement variable

weblemenet x = driver.findelement(by(xpath) 
by name
by id
by xpath 

text box- check box - radio button - drop down - links - button 

6. 
element.sendkeys- typing something in a webelement 
element.click - to click on some webelemnt
element.gettext - to read the text from the webelement 
element.isdisplayed - to check if the element is displayed in the page
element.isenabled - check if the element is enabled
element.isselected - check if the lement is selected 

7. 

driver.back
driver.forward
driver.refreash 

8. select dd = new select ( element) ; 

dd.seleectbyindex
dd.selectbyvisiabletext 



Class work - 

1. making sure your environment is setup 
java + selenium 
download the libraries from github 
2. navigate to the url 

https://identity.flickr.com/sign-up

and fill up the form, check if the sign up button is enabled 
and also read whatever is written in the sign up 

3. navigate to url 

https://www.amazon.com/


//*[@id='sign-up-first-name']



find three links to go to new web page read the title and web pages 
and print it in the console 


Class will start 10:30 AM 








1. download the two jar files from github

2. download the chromedriver.exe and put it anywhere in your computer

3. create a java project with lib folder and put the tow jar files

4. add them to build path 

662598123
u85qd7

1 566 586 423 
9s18jb


1570650680
19x4yg


568 979 725
2twj31


1566586423 
passsword n7t3z1 

1 562 177 294
1he77n

I will be back 01:05 











Good Morning 
Class will start 10:15 AM

Function - 

1. how to create a function
2. how to use a function 

main method - runnable class - test script 

public static void main(String args[]){

}


Function - input multiple - system - ouput 1 

 

public outputdatatype functionname(){

// write your function here

return data; 


}

datatype
variable
value 

int x; 
x=12;
boolean y; 
y=false;
double z;
z=12.12; 

int
String
boolean 

input - two numbers , output - summation of two numbers 

sendkeys("djfljd")
click()
setproperty("webdriver","locatoin of the driver")

math
public int addtwonumbers(int x, int y){

int sum; 
sum=x+y; 
return sum; 

}

runnable class - main method

math m = new math();
int a = m.addtwonumbers(12,100);
int b = m.addtwonumbers(100,200);

rent
public static int totalrent(int baserent, int parking, int utilities){

int totalrent; 
totalrent=baserent+parking+utilities; 
return totalrent; 

}

runnable class - main method

rent.totalrent(65,45,123);
rent r = new rent(); 
int x = r.totalrent(1200,100,200);
int y = m.addtwonumbers(100,200);


public void sendKeys(String x){

// type something

}

public void click(){

// click on a webelement

}

public boolean isdisplayed(){

// 

return true/false; 


}

8 ways - 8 locating tecniques 

fundamental locating tecniques 
name 
id
we can create xpath and css selector
xpath
css selector 

linktext - link
partiallinktext - link <a> href : 


tagname - mutiple web elements
classname - multiple 

input
button
a
select

10 webelement 



start again 11:15

question: 

role - java is the programming language 
selenium - is the library 

if I find weblements in google chrome browser 

I can run my code in any other browsers 

HTML code for the firstname text box 

<input 
type="text" id="usernamereg-firstName" class="ureg-fname " 
autocomplete="given-name" name="firstName" placeholder="First&nbsp;name" 
aria-label="First&nbsp;name" value="" 
maxlength="32" aria-required="true" aria-invalid="false"
 objectname = "1">


<input type="text" name="yid" id="usernamereg-yid" autocomplete="username" 
placeholder="Email&nbsp;address" aria-label="Email&nbsp;address" value="" 
maxlength="32" aria-required="true" objectname = "2">

basic rule: 
customize xpath 
attribute and value - relative xpath 
//tagname[@attribute="value"]
//input [@objectname="1"]
//input[@id="usernamereg-firstName"]
//input[@name="firstName"]
//input[@aria-invalid="false"]

//*[@id="usernamereg-firstName"]

absolute xpath 

/html/body/div[2]/div[2]/div[1]/div/form/fieldset/div/div[1]/input
HTML-CSS structure of the code 

// - reletive xpath 
 / - absolute xpath  


css selector 

tagname[attribute=value]
input[name="firstName"]
whatever locating tecnique gives you the unique value 



1. // and / 
2. relative xpath and absolute 
3. no elements has unique id and name - unique - xpath
4. no elements has anything unique - developer , absolute xpath

/html/body/div[2]/div[2]/div[1]/div/form/div[2]/input[1]


Framework - selenium 

automation testing framework: 

how to organize code in an efficient and maintanable way 

1. seperate test data from test script - data driven framework
2. seperate web element /object test script - object driven framework
3. seperating non-test data from test script - keyword driven framework
4. hybrid framework 


page object model class - where we find all webelements 
it is not a test script - 
it is a non-runnable class - 
10 weblements 5 times = 50 times 

locating tecniques
page object model 



















